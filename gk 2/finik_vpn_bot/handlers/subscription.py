from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from config import YUKASSA_SHOP_ID, YUKASSA_SECRET_KEY, TELEGRAM_BOT_TOKEN
from utils.db import extend_subscription, get_user_status, save_vpn_key, activate_referral_bonus, init_db_pool
from utils.marzban import get_marzban_token, enable_vpn_user, get_available_inbounds, create_vpn_user, get_vpn_user, delete_vpn_user
import uuid
import requests
import base64
import logging
import asyncio
from aiogram import Bot

bot = Bot(token=TELEGRAM_BOT_TOKEN)

logger = logging.getLogger(__name__)
router = Router()
_processed_payments = set()
# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è message_id (user_id -> {subscription_msg_id, payment_msg_id})
_message_ids = {}


@router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å")
async def buy_handler(message: Message):
    user_id = message.from_user.id
    logging_extra = {"user_id": user_id}
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ö—É–ø–∏—Ç—å'", extra=logging_extra)
    await message.delete()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ 149 ‚ÇΩ - 1 –º–µ—Å—è—Ü", callback_data="buy_30")],
        [InlineKeyboardButton(text="üí∞ 370 ‚ÇΩ - 3 –º–µ—Å—è—Ü–∞", callback_data="buy_90")],
        [InlineKeyboardButton(text="üí∞ 625 ‚ÇΩ - 6 –º–µ—Å—è—Ü–µ–≤", callback_data="buy_180")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="clear_message")]
    ])
    msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=keyboard)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
    _message_ids[user_id] = {"subscription_msg_id": msg.message_id, "payment_msg_id": None}


async def generate_payment_url(user_id: int, amount: int, days: int, order_id: str) -> tuple[str, str]:
    headers = {
        "Content-Type": "application/json",
        "Idempotence-Key": order_id,
        "Authorization": f"Basic {base64.b64encode(f'{YUKASSA_SHOP_ID}:{YUKASSA_SECRET_KEY}'.encode()).decode()}"
    }
    payload = {
        "amount": {"value": f"{amount}.00", "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": "https://t.me/finik_vpn_bot"},
        "capture": True,
        "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π –¥–ª—è user_{user_id}",
        "metadata": {"user_id": str(user_id), "days": str(days), "order_id": order_id},
        "receipt": {
            "customer": {"email": "support@finik.online"},
            "items": [
                {
                    "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π",
                    "quantity": "1.00",
                    "amount": {"value": f"{amount}.00", "currency": "RUB"},
                    "vat_code": 1,
                    "payment_subject": "service",
                    "payment_mode": "full_payment"
                }
            ]
        }
    }
    response = requests.post("https://api.yookassa.ru/v3/payments", json=payload, headers=headers)
    if response.status_code == 200:
        return response.json()["confirmation"]["confirmation_url"], response.json()["id"]
    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {response.text}", extra={"user_id": user_id})
    return None, None


@router.callback_query(F.data == "buy_30")
async def buy_30_days(callback: CallbackQuery):
    user_id = callback.from_user.id
    logging_extra = {"user_id": user_id}
    logger.info("–í—ã–±—Ä–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π", extra=logging_extra)
    await callback.message.delete()

    order_id = str(uuid.uuid4())
    payment_url, payment_id = await generate_payment_url(user_id, 149, 30, order_id)
    if not payment_url:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subscriptions")]
    ])
    msg = await callback.message.answer("–û–ø–ª–∞—Ç–∞ 30 –¥–Ω–µ–π: 149 —Ä—É–±–ª–µ–π", reply_markup=keyboard)
    # –û–±–Ω–æ–≤–ª—è–µ–º message_id –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    if user_id in _message_ids:
        _message_ids[user_id]["payment_msg_id"] = msg.message_id
    else:
        _message_ids[user_id] = {"subscription_msg_id": None, "payment_msg_id": msg.message_id}
    await callback.answer()


@router.callback_query(F.data == "buy_90")
async def buy_90_days(callback: CallbackQuery):
    user_id = callback.from_user.id
    logging_extra = {"user_id": user_id}
    logger.info("–í—ã–±—Ä–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 90 –¥–Ω–µ–π", extra=logging_extra)
    await callback.message.delete()

    order_id = str(uuid.uuid4())
    payment_url, payment_id = await generate_payment_url(user_id, 370, 90, order_id)
    if not payment_url:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subscriptions")]
    ])
    msg = await callback.message.answer("–û–ø–ª–∞—Ç–∞ 90 –¥–Ω–µ–π: 370 —Ä—É–±–ª–µ–π", reply_markup=keyboard)
    if user_id in _message_ids:
        _message_ids[user_id]["payment_msg_id"] = msg.message_id
    else:
        _message_ids[user_id] = {"subscription_msg_id": None, "payment_msg_id": msg.message_id}
    await callback.answer()


@router.callback_query(F.data == "buy_180")
async def buy_180_days(callback: CallbackQuery):
    user_id = callback.from_user.id
    logging_extra = {"user_id": user_id}
    logger.info("–í—ã–±—Ä–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 180 –¥–Ω–µ–π", extra=logging_extra)
    await callback.message.delete()

    order_id = str(uuid.uuid4())
    payment_url, payment_id = await generate_payment_url(user_id, 625, 180, order_id)
    if not payment_url:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subscriptions")]
    ])
    msg = await callback.message.answer("–û–ø–ª–∞—Ç–∞ 180 –¥–Ω–µ–π: 625 —Ä—É–±–ª–µ–π", reply_markup=keyboard)
    if user_id in _message_ids:
        _message_ids[user_id]["payment_msg_id"] = msg.message_id
    else:
        _message_ids[user_id] = {"subscription_msg_id": None, "payment_msg_id": msg.message_id}
    await callback.answer()


@router.callback_query(F.data == "back_to_subscriptions")
async def back_to_subscriptions(callback: CallbackQuery):
    user_id = callback.from_user.id
    logging_extra = {"user_id": user_id}
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–æ–∫", extra=logging_extra)
    await callback.message.delete()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ 149 ‚ÇΩ - 1 –º–µ—Å—è—Ü", callback_data="buy_30")],
        [InlineKeyboardButton(text="üí∞ 370 ‚ÇΩ - 3 –º–µ—Å—è—Ü–∞", callback_data="buy_90")],
        [InlineKeyboardButton(text="üí∞ 625 ‚ÇΩ - 6 –º–µ—Å—è—Ü–µ–≤", callback_data="buy_180")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="clear_message")]
    ])
    msg = await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=keyboard)
    _message_ids[user_id] = {"subscription_msg_id": msg.message_id, "payment_msg_id": None}
    await callback.answer()


@router.callback_query(F.data == "clear_message")
async def clear_message(callback: CallbackQuery):
    user_id = callback.from_user.id
    logging_extra = {"user_id": user_id}
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è", extra=logging_extra)
    await callback.message.delete()
    if user_id in _message_ids:
        del _message_ids[user_id]  # –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.answer()


async def proc_payment(user_id, days, order_id, payment_id):
    logging_extra = {"user_id": user_id}
    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É payment_id={payment_id}, days={days}", extra=logging_extra)
    if payment_id in _processed_payments:
        logger.info("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", extra=logging_extra)
        return
    _processed_payments.add(payment_id)
    logger.info(f"–ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É days={days}", extra=logging_extra)
    await extend_subscription(user_id, days)

    status = await get_user_status(user_id)
    token = await get_marzban_token()
    logger.info(f"token: {token}", extra=logging_extra)
    if token:
        username = f"user_{user_id}"
        if not status["vpn_key"]:
            user_data = await get_vpn_user(token, username)
            if user_data:
                delete_result = await delete_vpn_user(token, username)
                if not delete_result:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}", extra=logging_extra)
                    logger.info("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.", extra=logging_extra)
                    return
                await asyncio.sleep(1)

            inbounds = await get_available_inbounds(token)
            if not inbounds:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å inbounds", extra=logging_extra)
                return
            vpn_key = await create_vpn_user(token, username, inbounds)
            if not vpn_key or not vpn_key.get("subscription_url"):
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á", extra=logging_extra)
                return
            await save_vpn_key(user_id, vpn_key["subscription_url"])
            status = await get_user_status(user_id)
        await enable_vpn_user(token, username)

        pool = await init_db_pool()
        async with pool.acquire() as conn:
            referrers = await conn.fetch(
                "SELECT referrer_id FROM invited_users WHERE invited_user_id = $1 AND bonus_activated = FALSE",
                user_id
            )
        for referrer in referrers:
            referrer_id = referrer["referrer_id"]
            bonus_activated = await activate_referral_bonus(referrer_id, user_id)
            if bonus_activated:
                try:
                    await bot.send_message(
                        referrer_id,
                        f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–æ–¥–ø–∏—Å–∫—É! –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ 3 –¥–Ω—è."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è referrer_id={referrer_id}: {str(e)}", extra=logging_extra)

    # –£–¥–∞–ª—è–µ–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if user_id in _message_ids:
        for msg_key, msg_id in _message_ids[user_id].items():
            if msg_id:
                try:
                    await bot.delete_message(chat_id=user_id, message_id=msg_id)
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_key}: message_id={msg_id}", extra=logging_extra)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {msg_key}: {str(e)}", extra=logging_extra)
        del _message_ids[user_id]  # –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è

    await bot.send_message(user_id,
                           f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø –ø—Ä–æ–¥–ª—ë–Ω –¥–æ {status['subscription_end']} (–ú–°–ö).\n"
                           f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –º–µ–Ω—é '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'.")


def setup_subscription_handlers(dp: Router):
    dp.include_router(router)