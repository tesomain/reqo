import logging
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from utils.db import get_user_status

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "üìä –°—Ç–∞—Ç—É—Å")
async def status_handler(message: Message):
    user_id = message.from_user.id
    logging_extra = {"user_id": user_id}
    logger.info("–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞", extra=logging_extra)
    await message.delete()

    status = await get_user_status(user_id)
    if not status:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return

    access = "‚òëÔ∏è –ï—Å—Ç—å" if status["active"] else "‚ùå –ù–µ—Ç"
    days_left = status["days_left"]
    sub_end = status["subscription_end"] or "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    invited = status["invited"]
    ref_link = status["referral_link"]

    text = (
        f"üìä –°—Ç–∞—Ç—É—Å:\n"
        f"–î–æ—Å—Ç—É–ø: {access}\n"
        f"‚îú –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
        f"‚îî –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ (–ú–°–ö): {sub_end}\n\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"‚îî `{ref_link}`\n"
        f"‚¨ÜÔ∏è –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 3 –¥–Ω—è –∑–∞ –∫–∞–∂–¥—É—é –∏—Ö –ø–æ–¥–ø–∏—Å–∫—É!\n\n"
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n"
        f"‚îî –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {invited}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=ref_link)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="clear_message")]
    ])
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

def setup_status_handlers(dp: Router):
    dp.include_router(router)